# DIRECTORY STRUCTURE:



# HOW TO RUN PROGRAM: 
1. OPTIMIZE MODEL:
    1. In optimize.py change following variables:
        * "optimization_param" to the optimizations, configs, and output name you want
        * "model path" to path of model to optimize
    2. run "python optimize.py" - output is in optimize_model
2. POST TRAIN MODEL: 
    1. In SRCNN/config.py change following variable values to: 
        * "resume" to relative path of optimized model. 
        * "mode" to train.
        * "epoch" to however epochs you want model to run.  
    2. cd into SRCNN/ and run "python train.py"
    2. Output of final model is in SRCNN/samples/SRCNN_x2/epoch_xx.pth.tar
    1. Move the post trained model to optimize_model folder and rename it to whatever you want
3. TEST MODEL(PSNR): 
    1. In SRCNN/config.py change following variable values to : 
        * "mode" to test
        * "model_path" to relative path of post trained model
    2. cd into SRCNN/ and run "python test.py"
    3. PSNR value should be on command line.  
4. VISUALIZE MODEL RESULT:
    1. cd to SRCNN/
    2. run python ./inference.py --inputs_path <low res png path> --output_path <path to output high res png> --weights_path <relative path to model weight>
        * note SRCNN/figure/ folder has some test images to try or you can use an image in the SRCNN/data/ folder. 
        * Ex: "python ./inference.py --inputs_path ./figure/butterfly_lr.png --output_path ./figure/butterfly_sr.png --weights_path ./optimize_model/pytorch/pretrained.pth.tar"
5. EXPORT MODEL AS ONNX:
    1. in optimize.py change follow: 
        * model path to path of .pth.tar model you want to convert to onnx
        * output model name you want to call file
        * operation to "export"
    2. run "python optimize.py"
    3. onnx model should be in optimize_model/onnx/ folder.  
6. SPEEDUP TEST: 
    1. move exported onnx model to xgen using xgen speed test steps

# Models 

In optimize_model folder there are several models from running this experiment. The following models are seen below: 

* pretrained - gives the base pretrained model for SCRNN
* prune_level_s<x> - gives pruned model using level pruning with sparsity of x
    * only sparsity .4 and below worked anything above cause size mismatch
* prune_l1_s<x> - gives pruned model using l1NormPruner with sparsity of x
* pruned_fpgm_s<x> - gives pruned model using FPGMPruner with sparsity of x
* quant_qat_iw8 - gives quantized model using QATQuantier with input and weight precision 8
* quant_bnn_iw8 - gives quantized model using BNNQuantier with input and weight precision 8

# TODO
* update directory structure/clean up code - try to move optimize.py function, figure, and optimized model folder out of SRCNN 


# Things Tried:
REAL-ERSGAN 
* L1Norm pruning (failed due to taking too long 1+ day)
* Level Pruning (Failed as program stated there is no mask - might be due to issues with nni wrapping objects)
* RDN (64, 128, 3, 3)
* RDN - caused bluing effect where images appeared with blue tint. 

# Model Testing: 
* run original model and see if super resolution actually occurs
* convert original model to onnx and try on xgen to see if speed test work
* run model with pruning and see if pruning can occur. 


https://github.com/Lornatang/SRCNN-PyTorch



# STEPS
1. download pretrained model in SRCNN github rename to "pretrained.pth.tar" and send to Results/Optimized_models/Pytorch/
2. download lr_butterfly.png image into Results/Inference_Image/
3. follow instructions to download data


# look at how SRCNN github sets up 